{"version":3,"sources":["../../../../../react2021/rslang/rslangDev/rslang/src/components/LoadingScreen/LoadingScreen.tsx","../../../../../react2021/rslang/rslangDev/rslang/src/App.tsx","../../../../../react2021/rslang/rslangDev/rslang/src/reportWebVitals.ts","../../../../../react2021/rslang/rslangDev/rslang/src/index.tsx"],"names":["LoadingScreen","props","Container","className","App","LoadableComponent","Loadable","loader","loading","delay","LoadableTutorialPage","Fragment","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"uRAwBeA,EAjByC,SAACC,GACvD,OACE,cAACC,EAAA,EAAD,UACE,qBAAKC,UAAU,YAAf,SACE,sBAAKA,UAAU,SAAf,UACE,qBAAKA,UAAU,gBACf,qBAAKA,UAAU,gBACf,qBAAKA,UAAU,gBACf,qBAAKA,UAAU,gBACf,qBAAKA,UAAU,gBACf,qBAAKA,UAAU,gBACf,qBAAKA,UAAU,yBCcVC,MAzBf,WACE,IAAMC,EAAoBC,IAAS,CACjCC,OAAQ,kBAAM,4DACdC,QAASR,EACTS,MAAO,MAEHC,EAAuBJ,IAAS,CACpCC,OAAQ,kBAAM,4DACdC,QAASR,EACTS,MAAO,MAGT,OACE,cAAC,IAAD,UACE,qBAAKN,UAAU,MAAf,SACE,cAAC,IAAD,UACE,eAAC,IAAMQ,SAAP,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWT,IACjC,cAAC,IAAD,CAAOO,KAAK,iBAAiBE,UAAWJ,cCXrCK,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMd,SAAP,UACE,cAAC,EAAD,MAEFe,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7f726489.chunk.js","sourcesContent":["import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./LoadingScreen.scss\";\r\nimport React from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\n\r\ninterface InterfaceLoadingScreen {}\r\n\r\nconst LoadingScreen: React.FC<InterfaceLoadingScreen> = (props) => {\r\n  return (\r\n    <Container>\r\n      <div className=\"container\">\r\n        <div className=\"loader\">\r\n          <div className=\"loader--dot\"></div>\r\n          <div className=\"loader--dot\"></div>\r\n          <div className=\"loader--dot\"></div>\r\n          <div className=\"loader--dot\"></div>\r\n          <div className=\"loader--dot\"></div>\r\n          <div className=\"loader--dot\"></div>\r\n          <div className=\"loader--text\"></div>\r\n        </div>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\nexport default LoadingScreen;\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.scss\";\r\nimport React from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport Loadable from \"react-loadable\";\r\nimport LoadingScreen from \"./components/LoadingScreen/LoadingScreen\";\r\n\r\nfunction App() {\r\n  const LoadableComponent = Loadable({\r\n    loader: () => import(\"./components/HomePage/HomePage\"),\r\n    loading: LoadingScreen,\r\n    delay: 300,\r\n  });\r\n  const LoadableTutorialPage = Loadable({\r\n    loader: () => import(\"./components/TutorialPage/TutorialPage\"),\r\n    loading: LoadingScreen,\r\n    delay: 300,\r\n  });\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <React.Fragment>\r\n            <Route path=\"/\" exact component={LoadableComponent} />\r\n            <Route path=\"/tutorial-page\" component={LoadableTutorialPage} />\r\n          </React.Fragment>\r\n        </Switch>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.Fragment>\r\n    <App />\r\n  </React.Fragment>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}